            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

The Parallel Processors

Anirudh Reddy Nalamada  <aniredn@buffalo.edu>
Arundhati Rao           <arao4@buffalo.edu>
Shravya Thandra         <shravyat@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Struct sleep_sema
{
Struct list_elem elem;
Int wakeup_time;
Struct semaphore smp;
} - Used to store the individual details of the thread. A separate semaphore has been created for each thread.

Struct list waiting_list; - used to keep track of all the threads that have been blocked after calling sema_down

Struct lock wait_lock; - used to only allow one thread to access the waiting_list variable at a particular time 

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

Timer_sleep()
1.Calculate the ticks at which the thread should be woken up (time_elapsed + ticks)
2.Check if a particular thread has a value of zero ticks. If yes, no further processing is required.
3.Insert thread into an ordered list (waiting_list), based on ascending wakeup times.

Timer_interrupt()
1. Check the wakeup time of the first element of waiting_list and see if it can be woken up.
2. Sema_up is called on the thread if the required number of ticks have passed.
3. The thread that is woken up is removed from the waiting_list.
4. If the thread is woken up then check the next element if it has the same wakeup time. If true then wake up the next thread too.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Before calling the interrupt handler, we are storing all the threads in a sorted format with the thread with the minimum wake up time at the front; so that only this value has to be checked inside the timer interrupt. Thus, minimizing the processing time.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

We have decided to implement locks inside the timer_sleep() so that race conditions can be avoided. When locks are used, only one thread can execute the critical section of the code and no other thread can execute the same until the lock has been released by that thread.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Similar to the above case, we have decided to use a lock for the waiting_list so that it is not interrupted by a call to timer_sleep, which inserts a value into waiting_list.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Previously, we had decided to use a single semaphore and to store all the threads in the waiters list of the semaphore structure. But since the waiters list works on the basis of FIFO, we will not be able to pop out the required thread when its wakeup_time elapses. Hence, we decided to implement separate semaphores for separate threads.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Struct list acquired_lock - Used to store the locks that have been acquire by a particular thread.

Struct lock *blocked_lock - Used as a pointer to the lock that has been blocked by a thread.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    int original_priority       // Used to store the original priority of a thread when it is being changed.

struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */

Struct list acquired_lock       //Described above
Struct lock *blocked_lock       // Described above
  };

struct semaphore_elem 
  {
    int priority;              /* Used to store the priority of the thread                  that is stored in the semaphore below. Priority                     is used to sort the threads in descending order                     of priority*/
    struct list_elem elem;              /* List element. */
    struct semaphore semaphore;         /* This semaphore. */
  };

struct lock 
  {
    struct list_elem elem;      /* Used to carry out list operations on lock                        structure*/
    struct thread *holder;      /* Thread holding lock (for debugging). */
    struct semaphore semaphore; /* Binary semaphore controlling access. */
  };

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Locks, semaphores and condition variables, all depend on how the sema_down() is implemented. By changing the sema_down() in such a way that the highest priority thread is at the first position in the waiters list and sorting the list in a descending order, all the other constructs can call the highest priority thread first. Sorting is also being done in the cond_wait() function to ensure the highest priority thread is woken up first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When a higher priority thread is created and if it needs a lock, we make a call to lock_acquire(). This function checks if a thread of lower priority is currently holding the lock. If true, then the priority of the higher priority thread will be donated to the lower priority thread. The original priority of the lower priority thread is stored temporarily in a variable so that it can be restored after the lock has been released.
In case of a nested donation, the above process is done in a recursive manner. Priority of the high priority thread is donated to the medium priority thread, which in turn donates the priority to the low priority thread. In this way a nested donation can be handled.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When a lower priority thread, which is holding the lock, finishes its execution, it calls the lock_release(). Lock_release() will set the holder of the lock to null and call sema_up(). As already mentioned, we are changing the implementation of the sema_down() to store thread values in the waiters list in order of priority. Thus the lock will ultimately be given to the highest priority thread. 

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A race condition will occur when there are multiple calls to the thread_set_priority(). To avoid this, we are using locks. The critical section of the function will be handled using locks so that multiple threads cannot execute the same piece of code and cause random results.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We will be filling out this part later during implementation phase of the project as we believe we will be able to better understand the design then.

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    int original_priority        // used to store the original priority of a thread when it is being changed.

   int mlfqs_nice;                     // stores nice value of thread
   int mlfqs_recent_cpu;               // stores recent_cpu time of thread

struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */

Struct list acquired_lock       //Described above
Struct lock *blocked_lock       // Described above
  };


---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

Ticks       Recent CPU              Priority            Thread to run
--  A   B   C   A   B   C   --
0   0   0   0   63  61  59  A
4   4   0   0   62  62  59  A
8   8   0   0   61  61  59  B
12  8   4   0   61  60  59  A
16  12  4   0   60  60  59  B
20  12  8   0   60  59  59  A
24  16  8   0   59  59  59  C
28  16  8   4   59  59  58  B
32  16  12  4   59  58  58  A
36  20  12  4   58  58  58  C



>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

There is an ambiguity when two threads have equal priority. At such a time we had to decide which thread should run first. We can execute them using a round robin algorithm or we can execute the thread that has not been recently executed.
In our implementation, we have decided to run the thread, which has the highest nice value if the priorities are equal.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

Code written inside interrupt functions definitely affects performance to a large extent. Timer interrupt() is executed multiple times every second and it updates the number of ticks. If there are too many functions to be executed inside the timer interrupt(), then this may result in the wastage of resources (CPU time). Hence we should minimize the amount of code inside the timer interrupt() and try to execute most functions externally. Any function that does not need to be executed after every tick will be excluded from the timer interrupt().
`
---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

We will fill this part once we begin the implementation of the advanced scheduler.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

We did not implement fixed point math in our project. It increases the complexity. 

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

