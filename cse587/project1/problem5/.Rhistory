library(jsonlite)
library(twitteR)
#Setup Twitter Connection
setup_twitter_oauth("1piQRlZAKyEWSo6BGqozHrmDh",	"ckYi0R5lZT8wDNcOu9YjrRn9AQMe7xMrMiZcl4P2EHTXTSazxQ","150665360-hZLOF7K4MkrQKu2LkBXtIwAQ8EYT7vhQayJNYLv9", "s2TakaZg3tAkpTV2925oDHnAbKiMO2ZgP4sif2chlMsaM")
tweets<- searchTwitter("nyc+rent+apartment+house+lease",n=1000, since = '2015-02-20',until = '2015-02-22',retryOnRateLimit = 100)
tweets<- searchTwitter("nyc+rent",n=1000, since = '2015-02-20',until = '2015-02-22',retryOnRateLimit = 100)
tweets<- searchTwitter("lease+nyc",n=1000, since = '2015-02-20',until = '2015-02-22',retryOnRateLimit = 100)
tweets<- searchTwitter("lease+nyc",n=10, since = '2015-02-20',until = '2015-02-22',retryOnRateLimit = 100)
setup_twitter_oauth("nvET2KHwicFkxWuKqhgCwO7M3","zA91KODJZ868Egs91Ojn6Jbet5gOdqByzCrV9LzPNXYjQkJJFc","150665360-6rHsbmQ8R3vsLclkrZ52nKSSURwpJLvPLDhtYunk","wjLm0GJMp1USiDQrZFWTPe95weBwTN6QQaGiwrscDowFG")
#Search for Tweets
tweets<- searchTwitter("lease+nyc",n=10, since = '2015-02-20',until = '2015-02-22',retryOnRateLimit = 100)
library(jsonlite)
library(twitteR)
#Setup Twitter Connection
#setup_twitter_oauth("1piQRlZAKyEWSo6BGqozHrmDh",	"ckYi0R5lZT8wDNcOu9YjrRn9AQMe7xMrMiZcl4P2EHTXTSazxQ","150665360-hZLOF7K4MkrQKu2LkBXtIwAQ8EYT7vhQayJNYLv9", "s2TakaZg3tAkpTV2925oDHnAbKiMO2ZgP4sif2chlMsaM")
setup_twitter_oauth("nvET2KHwicFkxWuKqhgCwO7M3","zA91KODJZ868Egs91Ojn6Jbet5gOdqByzCrV9LzPNXYjQkJJFc","150665360-6rHsbmQ8R3vsLclkrZ52nKSSURwpJLvPLDhtYunk","wjLm0GJMp1USiDQrZFWTPe95weBwTN6QQaGiwrscDowFG")
#Search for Tweets
tweets<- searchTwitter("lease+nyc",n=10, since = '2015-02-20',until = '2015-02-22',retryOnRateLimit = 100)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
#Save JSON file
tweets<- searchTwitter("lease+nyc",n=10, since = '2015-02-20',until = '2015-02-22')
tweets<- searchTwitter("lease+nyc",n=10, since = '2015-02-20',until = '2015-02-27')
tweets<- searchTwitter("rent", n=10, since = '2015-02-20')
tweets<- searchTwitter("rent+nyc+lease+apartment", n=1000)
tweets<- searchTwitter("rent+nyc+apartment", n=1000)
tweets<- searchTwitter("rent+nyc", n=1000)
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
#Save JSON file
write(tw.json, file = "/Users/anirudhreddy/Desktop/b.json")
tweets<- searchTwitter("rent,nyc", n=1000)
tweets<- searchTwitter("rent + #nyc + cheap", n=1000)
tweets<- searchTwitter("apartment+newyork", n=1000)
tweets<- searchTwitter("apartment+newyork", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
#Save JSON file
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/c.json")
tweets<- searchTwitter("lease+newyork", n=1000)
tweets<- searchTwitter("rent+newyork", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
#Save JSON file
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/d.json")
tweets<- searchTwitter("sublease+newyork", n=1000)
tweets<- searchTwitter("rent+brooklyn", n=1000)
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
#Save JSON file
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/rentbrooklyn.json")
tweets<- searchTwitter("rent+manhatten", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
tweets<- searchTwitter("rent+manhattan", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/rentmanhanttan.json")
tweets<- searchTwitter("rent+bronx", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
#Save JSON file
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/rentbronx.json")
tweets<- searchTwitter("rent+queens", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
library(jsonlite)
library(twitteR)
#Setup Twitter Connection
#setup_twitter_oauth("1piQRlZAKyEWSo6BGqozHrmDh",	"ckYi0R5lZT8wDNcOu9YjrRn9AQMe7xMrMiZcl4P2EHTXTSazxQ","150665360-hZLOF7K4MkrQKu2LkBXtIwAQ8EYT7vhQayJNYLv9", "s2TakaZg3tAkpTV2925oDHnAbKiMO2ZgP4sif2chlMsaM")
tweets<- searchTwitter("rent+queens", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/rentqueens.json")
tweets<- searchTwitter("rent+nyc", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/rentnyc.json")
tweets<- searchTwitter("rent+newyork", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tweets<- searchTwitter("rent+newyork", n=1000)
#Convert Tweets list to dataframe
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
#Save JSON file
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/rentnewyork.json")
tweets<- searchTwitter("house+nyc", n=1000)
tweets<- searchTwitter("house+nyc+rent", n=1000)
tweets<- searchTwitter("rent", n=1000, geocode = "40.7127,-74.0059,20mi")
tweets<- searchTwitter("rent", n=1000, geocode = "40.7127,-74.0059,50mi")
tweets<- searchTwitter("lease", n=1000, geocode = "40.7127,-74.0059,50mi")
tweets<- searchTwitter("rent+tribeca", n=1000)
tweets<- searchTwitter("rent+statenisland", n=1000)
tweets<- searchTwitter("rent+staten+island", n=1000)
tweets<- searchTwitter("roommate+nyc", n=1000)
tweets<- searchTwitter("room+mate+nyc", n=1000)
tweets<- searchTwitter("roommate+nyc", n=1000)
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
#Save JSON file
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/roommatenyc")
tweets<- searchTwitter("roommate+newyork", n=1000)
tw.df<-twListToDF(tweets)
#Convert Tweets dataframe to JSON Object
tw.json<-toJSON(tw.df, pretty = TRUE, dataframe = "rows")
#Save JSON file
write(tw.json, file = "/Users/anirudhreddy/Desktop/Rdata/roommatenewyork.json")
tweets<- searchTwitter("roommate+brooklyn", n=1000)
tweets<- searchTwitter("roommate+bronx", n=1000)
tweets<- searchTwitter("roommate+nyc", n=1000)
tweets<- searchTwitter("trump", n=1000)
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
require(package = "ggplot2")
require(package = "doBy")
urlpart1 = "http://stat.columbia.edu/~rachel/datasets/nyt"
urlpart2 = ".csv"
#Populating day 1 data
nyt_data=read.csv(url("http://stat.columbia.edu/~rachel/datasets/nyt1.csv"))
numrows <- c(0)
#Calculate number on entries for first day
numrows <- rbind(numrows,nrow(nyt_data))
sumt<- nrow(nyt_data)
for(i in 2:31)
{
wholeurl=paste(paste(urlpart1,i,sep=""),urlpart2,sep="")
temp=read.csv(url(wholeurl))
#Calculate and populate number of entries for each day
temprows = nrow(temp)
sumt = sumt+temprows
numrows = rbind(numrows,sumt)
nyt_data=rbind(nyt_data,temp)
}
#Creating age categories for the data set
nyt_data$agecat <- cut(nyt_data$Age,c(-Inf,0,18,24,34,44,54,64,Inf))
require(gdata)
require(plyr)
bk<-read.csv("/Users/anirudhreddy/Desktop/Rdata/dds_ch2_rollingsales/rollingsales_brooklyn.csv")
br<-read.csv("/Users/anirudhreddy/Desktop/Rdata/dds_ch2_rollingsales/rollingsales_bronx.csv")
mn <-read.csv("/Users/anirudhreddy/Desktop/Rdata/dds_ch2_rollingsales/rollingsales_manhattan.csv")
qn<-read.csv("/Users/anirudhreddy/Desktop/Rdata/dds_ch2_rollingsales/rollingsales_queens.csv")
si<-read.csv("/Users/anirudhreddy/Desktop/Rdata/dds_ch2_rollingsales/rollingsales_statenisland.csv")
#Create a new Column containing Sale Price as a numeric value
bk$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","",bk$SALE.PRICE))
br$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","",br$SALE.PRICE))
mn$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","",mn$SALE.PRICE))
qn$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","",qn$SALE.PRICE))
si$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","",si$SALE.PRICE))
#Check if there are any NaN in the Sale Price Column
count(is.na(bk$SALE.PRICE.N))
count(is.na(br$SALE.PRICE.N))
count(is.na(mn$SALE.PRICE.N))
count(is.na(qn$SALE.PRICE.N))
count(is.na(si$SALE.PRICE.N))
#Convert Column names to lower case
names(bk) <- tolower(names(bk))
names(br) <- tolower(names(br))
names(mn) <- tolower(names(mn))
names(qn) <- tolower(names(qn))
names(si) <- tolower(names(si))
## clean/format the data with regular expressions
bk$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", bk$gross.square.feet))
bk$land.sqft <- as.numeric(gsub("[^[:digit:]]","", bk$land.square.feet))
bk$sale.date <- as.Date(bk$sale.date, "%m/%d/%y")
bk$year.built <- as.numeric(as.character(bk$year.built))
br$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", br$gross.square.feet))
br$land.sqft <- as.numeric(gsub("[^[:digit:]]","", br$land.square.feet))
br$sale.date <- as.Date(br$sale.date, "%m/%d/%y")
br$year.built <- as.numeric(as.character(br$year.built))
mn$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", mn$gross.square.feet))
mn$land.sqft <- as.numeric(gsub("[^[:digit:]]","", mn$land.square.feet))
mn$sale.date <- as.Date(mn$sale.date, "%m/%d/%y")
mn$year.built <- as.numeric(as.character(mn$year.built))
qn$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", qn$gross.square.feet))
qn$land.sqft <- as.numeric(gsub("[^[:digit:]]","", qn$land.square.feet))
qn$sale.date <- as.Date(qn$sale.date, "%m/%d/%y")
qn$year.built <- as.numeric(as.character(qn$year.built))
si$gross.sqft <- as.numeric(gsub("[^[:digit:]]","", si$gross.square.feet))
si$land.sqft <- as.numeric(gsub("[^[:digit:]]","", si$land.square.feet))
si$sale.date <- as.Date(si$sale.date, "%m/%d/%y")
si$year.built <- as.numeric(as.character(si$year.built))
#Create a new dataframe without houses having non zero sale prices or abnormally low prices
bk.sale <- bk[bk$sale.price.n!=0 & bk$sale.price.n>1000,]
br.sale <- br[br$sale.price.n!=0 & br$sale.price.n>1000,]
mn.sale <- mn[mn$sale.price.n!=0 & mn$sale.price.n>1000,]
qn.sale <- qn[qn$sale.price.n!=0 & qn$sale.price.n>1000,]
si.sale <- si[si$sale.price.n!=0 & si$sale.price.n>1000,]
div<-function(x,y){return(x/y)}
#Calculating price per square feet and storing it in a new column
bk.sale$persft<- div(bk.sale$sale.price.n,bk.sale$gross.sqft)
br.sale$persft<- div(br.sale$sale.price.n,br.sale$gross.sqft)
mn.sale$persft<- div(mn.sale$sale.price.n,mn.sale$gross.sqft)
qn.sale$persft<- div(qn.sale$sale.price.n,qn.sale$gross.sqft)
si.sale$persft<- div(si.sale$sale.price.n,si.sale$gross.sqft)
#Calculating average price per squarefeet for different boroughs
par(mfrow=c(1,5))
boxplot(bk.sale$persft[bk.sale$gross.sqft>0], outline = FALSE, xlab = "Brooklyn", ylab = "Price per sft")
boxplot(br.sale$persft[br.sale$gross.sqft>0], outline = FALSE, xlab = "Bronx", ylab = "Price per sft")
boxplot(mn.sale$persft[mn.sale$gross.sqft>0], outline = FALSE, xlab = "Manhatten", ylab = "Price per sft")
boxplot(qn.sale$persft[qn.sale$gross.sqft>0], outline = FALSE, xlab = "Queens", ylab = "Price per sft")
boxplot(si.sale$persft[si.sale$gross.sqft>0], outline = FALSE, xlab = "Staten Island", ylab = "Price per sft")
#Create a new dataframe for Family Houses
bk.homes <- bk.sale[which(grepl("FAMILY",bk.sale$building.class.category)),]
br.homes <- br.sale[which(grepl("FAMILY",br.sale$building.class.category)),]
mn.homes <- mn.sale[which(grepl("FAMILY",mn.sale$building.class.category)),]
qn.homes <- qn.sale[which(grepl("FAMILY",qn.sale$building.class.category)),]
si.homes <- si.sale[which(grepl("FAMILY",si.sale$building.class.category)),]
#One Bedroom Houses
bk.homes.one <- bk.homes[which(grepl("ONE",bk.homes$building.class.category)),]
br.homes.one <- br.homes[which(grepl("ONE",br.homes$building.class.category)),]
mn.homes.one <- mn.homes[which(grepl("ONE",mn.homes$building.class.category)),]
qn.homes.one <- qn.homes[which(grepl("ONE",qn.homes$building.class.category)),]
si.homes.one <- si.homes[which(grepl("ONE",si.homes$building.class.category)),]
#Two Bedroom Houses
bk.homes.two <- bk.homes[which(grepl("TWO",bk.homes$building.class.category)),]
br.homes.two <- br.homes[which(grepl("TWO",br.homes$building.class.category)),]
mn.homes.two <- mn.homes[which(grepl("TWO",mn.homes$building.class.category)),]
qn.homes.two <- qn.homes[which(grepl("TWO",qn.homes$building.class.category)),]
si.homes.two <- si.homes[which(grepl("TWO",si.homes$building.class.category)),]
#Three Bedroom Houses
bk.homes.three <- bk.homes[which(grepl("THREE",bk.homes$building.class.category)),]
br.homes.three <- br.homes[which(grepl("THREE",br.homes$building.class.category)),]
mn.homes.three <- mn.homes[which(grepl("THREE",mn.homes$building.class.category)),]
qn.homes.three <- qn.homes[which(grepl("THREE",qn.homes$building.class.category)),]
si.homes.three <- si.homes[which(grepl("THREE",si.homes$building.class.category)),]
boxplot(ylab = "Sale price",bk$sale.price.n[bk$sale.price.n!=0],br$sale.price.n[br$sale.price.n!=0],mn$sale.price.n[mn$sale.price.n!=0],qn$sale.price.n[qn$sale.price.n!=0],si$sale.price.n[si$sale.price.n!=0], outline = FALSE, names = c("Brooklyn","Bronx","Manhattan","Queens","Staten Island"), col = "aquamarine")
#Plotting number of sales in each month for different boroughs
par(mfrow=c(2,3))
hist(bk.sale$sale.date, breaks = "months", xlab = "Brooklyn Sales", main = "", col = "gray")
hist(br.sale$sale.date, breaks = "months", xlab = "Bronx Sales", main = "", col = "gray")
hist(mn.sale$sale.date, breaks = "months", xlab = "Manhattan Sales", main = "", col = "gray")
hist(qn.sale$sale.date, breaks = "months", xlab = "Queens Sales", main = "", col = "gray")
hist(si.sale$sale.date, breaks = "months", xlab = "Staten Island Sales", main = "", col = "gray")
#Plot of total number of sales in each region
barplot(c(nrow(bk),nrow(br) ,nrow(mn),nrow(qn),nrow(si)), names= c("Brooklyn","Bronx","Manhattan","Queens","Staten Island"), width = 1)
par(mfrow=c(2,3))
barplot(c(nrow(bk.homes.one), nrow(bk.homes.two), nrow(bk.homes.three)), xlab = "Brooklyn", ylab = "Number of Sales", names= c("One", "Two", "Three"))
barplot(c(nrow(br.homes.one), nrow(br.homes.two), nrow(br.homes.three)), xlab = "Bronx", ylab = "Number of Sales", names= c("One", "Two", "Three"))
barplot(c(nrow(mn.homes.one), nrow(mn.homes.two), nrow(mn.homes.three)), xlab = "Manhattan", ylab = "Number of Sales", names= c("One", "Two", "Three"))
barplot(c(nrow(qn.homes.one), nrow(qn.homes.two), nrow(qn.homes.three)), xlab = "Queens", ylab = "Number of Sales", names= c("One", "Two", "Three"))
barplot(c(nrow(si.homes.one), nrow(si.homes.two), nrow(si.homes.three)), xlab = "Staten Island", ylab = "Number of Sales", names= c("One", "Two", "Three"))
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
cruz<- tweets_all[which(grepl("ted|cruz", tweets_all$text)),]
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
library(jsonlite)
library(twitteR)
#Reading all JSON files into R
tweets_1 <- fromJSON("/Users/anirudhreddy/Desktop/Rdata/apartment.json")
tweets_2 <- fromJSON("/Users/anirudhreddy/Desktop/Rdata/condos.json")
tweets_3 <- fromJSON("/Users/anirudhreddy/Desktop/Rdata/houses.json")
View(tweets_1)
View(tweets_2)
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(tm)
library(jsonlite)
library(twitteR)
library(tm)
#Reading all JSON files into R
tweets_1 <- fromJSON("/Users/anirudhreddy/Desktop/Rdata/apartment.json")
tweets_2 <- fromJSON("/Users/anirudhreddy/Desktop/Rdata/condos.json")
tweets_3 <- fromJSON("/Users/anirudhreddy/Desktop/Rdata/houses.json")
#Merging all dataframes
tweets_all<- rbind(tweets_1,tweets_2, tweets_3)
#Building a Corpus
myCorpus <-Corpus(VectorSource(tweets_all$text))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
tweets_all<- rbind(tweets_1,tweets_2, tweets_3)
#Building a Corpus
myCorpus <-Corpus(VectorSource(tweets_all$text))
myCorpus <- tm_map(myCorpus, content_transformer(tolower))
myCorpus
View(myCorpus)
myCorpus <- tm_map(myCorpus, removePunctuation)
myCorpus <- tm_map(myCorpus, content_transformer(tolower), lazy = TRUE)
myCorpus <- tm_map(myCorpus, removePunctuation,lazy = TRUE)
myCorpus <- tm_map(myCorpus, removeNumbers,lazy = TRUE)
#Removing URL
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x)
myCorpus <- tm_map(myCorpus, content_transformer(removeURL), lazy = TRUE)
myStopwords <- stopwords(kind = "en")
#Removing stop words from the corpus
myCorpus <- tm_map(myCorpus, removeWords, myStopwords)
myCorpus <- tm_map(myCorpus, removeWords, myStopwords,lazy = TRUE)
myCorpusCopy <- myCorpus
myCorpus <- tm_map(myCorpus, stemDocument)
myCorpus <- tm_map(myCorpus, stemDocument, lazy = TRUE)
for (i in 1:5) {
cat(paste("[[", i, "]] ", sep = ""))
#writeLines(myCorpus[[i]])
writeLines(as.character(myCorpus[[i]]))
}
myCorpusCopy <- myCorpus
myCorpus <- tm_map(myCorpus, stemDocument, lazy = TRUE)
for (i in 1:5) {
cat(paste("[[", i, "]] ", sep = ""))
#writeLines(myCorpus[[i]])
writeLines(as.character(myCorpus[[i]]))
}
myCorpusCopy <- myCorpus
myCorpus <- tm_map(myCorpus, stemDocument, lazy = TRUE)
}
for (i in 1:5) {
cat(paste("[[", i, "]] ", sep = ""))
writeLines(as.character(myCorpus[[i]]))
}
tdm <- TermDocumentMatrix(myCorpus, control = list(wordLengths = c(1, Inf)))
tdm
tdm <- TermDocumentMatrix(myCorpus, control = list(wordLengths = c(1, Inf)))
tdm <- TermDocumentMatrix(myCorpus, control = list(wordLengths = c(1, Inf)))
for (i in 1:5) {
cat(paste("[[", i, "]] ", sep = ""))
writeLines(as.character(myCorpus[[i]]))
}
tdm <- TermDocumentMatrix(myCorpus)
install.packages("SnowballC")
library(SnowballC)
myCorpus <- tm_map(myCorpus, stemDocument, lazy = TRUE)
tdm <- TermDocumentMatrix(myCorpus)
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
shiny::runApp('Documents/CSE587/Project 1/Problem 5')
ds
shiny::runApp()
